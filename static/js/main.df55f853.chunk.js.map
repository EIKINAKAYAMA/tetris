{"version":3,"sources":["index.js"],"names":["ga4react","GA4React","x","middleX","Math","floor","blocktemplate","thisFigures","figures","color","angle","rotatedFigures","TetrisInformationPanel","this","props","score","level","message","judge","React","Component","Square","className","name","Table","i","table","Array","fill","tbody","templateblocks","filter","f","row","j","num","includes","push","renderSquare","Board","board","Tetris","state","currentBlock","nextBlock","cleateblock","histories","window","onkeydown","e","key","moveLeft","rotate","moveRight","fallblock","history","length","slice","rotatedAngle","console","log","find","setState","map","m","filteredBottomFigure","figure","JudgeBottomFigure","indexOf","minY","min","maxY","max","fixblock","deleteLine","boardcopy","forEach","concat","copyboard","LineConter","splice","current","copyhistories","some","random","getRandomBlock","timeId","time","clearTimeout","setTimeout","mainloop","bind","delete","changeInfo","startGame","id","onMouseDown","_","a","initialize","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.df55f853.chunk.js","sourcesContent":["import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport GA4React from 'ga-4-react'\n\nconst ga4react = new GA4React('G-GB64VYNVM1')\nconst x = 12 // x=（実際に表示させたい数）＋２（左右の隠し分）\nconst y = 22 // y=（実際に表示させたい数）＋２（最上位列の隠し分）\nconst maxNum = x * y\nconst middleX = Math.floor(x / 2)\n\n// テトリミノの設定用関数\nfunction blocktemplate (middleX, x, thisFigures) {\n  const blocks =\n  [\n    {\n      figures: [middleX - 2, middleX - 1, middleX, middleX + 1],\n      color: 'lightblue',\n      angle: 0,\n      rotatedFigures: [\n        [thisFigures[0] - 2 * x + 2, thisFigures[1] - x + 1, thisFigures[2], thisFigures[3] + x - 1],\n        [thisFigures[0] + 2 * x - 2, thisFigures[1] + x - 1, thisFigures[2], thisFigures[3] - x + 1]\n      ]\n    },\n    {\n      figures: [middleX - 1, middleX, middleX + x - 1, middleX + x],\n      color: 'yellow',\n      angle: 0\n      // 正方形の為、回転しない\n    },\n    {\n      figures: [middleX, middleX + 1, middleX - 1 + x, middleX + x],\n      color: 'green',\n      angle: 0,\n      rotatedFigures: [\n        [thisFigures[0] + x, thisFigures[1] + 2 * x - 1, thisFigures[2] - x, thisFigures[3] - 1],\n        [thisFigures[0] - x, thisFigures[1] - 2 * x + 1, thisFigures[2] + x, thisFigures[3] + 1]\n      ]\n    },\n    {\n      figures: [middleX - 1, middleX, middleX + x, middleX + x + 1],\n      color: 'red',\n      angle: 0,\n      rotatedFigures: [\n        [thisFigures[0] + 2, thisFigures[1] + x + 1, thisFigures[2], thisFigures[3] + x - 1],\n        [thisFigures[0] - 2, thisFigures[1] - x - 1, thisFigures[2], thisFigures[3] - x + 1]\n      ]\n    },\n    {\n      figures: [middleX - 1, middleX + x - 1, middleX + x, middleX + x + 1],\n      color: 'blue',\n      angle: 0,\n      rotatedFigures: [\n        [thisFigures[0] + 2, thisFigures[1] - x + 1, thisFigures[2], thisFigures[3] + x - 1],\n        [thisFigures[0] + 2 * x, thisFigures[1] + x + 1, thisFigures[2], thisFigures[3] - x - 1],\n        [thisFigures[0] - 2, thisFigures[1] + x - 1, thisFigures[2], thisFigures[3] - x + 1],\n        [thisFigures[0] - 2 * x, thisFigures[1] - x - 1, thisFigures[2], thisFigures[3] + x + 1]\n      ]\n    },\n    {\n      figures: [middleX + 1, middleX + x - 1, middleX + x, middleX + x + 1],\n      color: 'orange',\n      angle: 0,\n      rotatedFigures: [\n        [thisFigures[0] + 2 * x, thisFigures[1] - x + 1, thisFigures[2], thisFigures[3] + x - 1],\n        [thisFigures[0] - 2, thisFigures[1] + x + 1, thisFigures[2], thisFigures[3] - x - 1],\n        [thisFigures[0] - 2 * x, thisFigures[1] + x - 1, thisFigures[2], thisFigures[3] - x + 1],\n        [thisFigures[0] + 2, thisFigures[1] - x - 1, thisFigures[2], thisFigures[3] + x + 1]\n      ]\n    },\n    {\n      figures: [middleX, middleX + x - 1, middleX + x, middleX + x + 1],\n      color: 'purple',\n      angle: 0,\n      rotatedFigures: [\n        [thisFigures[0] + x + 1, thisFigures[1] - x + 1, thisFigures[2], thisFigures[3] + x - 1],\n        [thisFigures[0] + x - 1, thisFigures[1] + x + 1, thisFigures[2], thisFigures[3] - x - 1],\n        [thisFigures[0] - x - 1, thisFigures[1] + x - 1, thisFigures[2], thisFigures[3] - x + 1],\n        [thisFigures[0] - x + 1, thisFigures[1] - x - 1, thisFigures[2], thisFigures[3] + x + 1]\n      ]\n    }\n  ]\n  return blocks\n  // const blocks = blocks_without_angle.map(f => {f.angle = 0 return f})\n  // const blocks = blocks_without_angle.map(f =>  ({...f , angle : 0}))\n}\n\nclass TetrisInformationPanel extends React.Component {\n  render () {\n    return (\n      <div>\n        <p>Score&nbsp;&nbsp;:&nbsp;&nbsp;{this.props.score}</p>\n        <p>Level&nbsp;&nbsp;:&nbsp;&nbsp;{this.props.level}</p>\n        <p>ナカヤマン：<br />{this.props.message}</p>\n        <p>勝利判定：{this.props.judge}</p>\n      </div>\n    )\n  }\n}\n\nfunction Square (props) {\n  return (\n    <td className={`block-type-${props.name}`} />\n  )\n}\n\n// 次のブロックを表示する為のtableクラス\nclass Table extends React.Component {\n  renderSquare (i) {\n    const table = Array(16).fill(null)\n    return <Square key={`table${i}`} name={table[i]} />\n  }\n\n  render () {\n    const nextX = 2\n    const nextY = 4\n    const tbody = []\n    const templateblocks = blocktemplate(nextX, nextY, x, Array(5).fill(null))\n    const blocks = this.props.color ? templateblocks.filter(f => f.color === this.props.color) : [{ figures: [-1] }]\n    const figures = blocks[0].figures\n    for (let i = 0; i < nextX; i++) {\n      const row = []\n      for (let j = 0; j < nextY; j++) {\n        const num = i * 4 + j\n        figures.includes(num)\n          ? row.push(<td key={`table-td ${num}`} className={`block-type-${this.props.color}`} />)\n          : row.push(this.renderSquare(num))\n      }\n      tbody.push(<tr key={`table-tr ${i}`} className='table-row'>{row}</tr>)\n    }\n\n    return (\n      <table className='board-table'>\n        <tbody>\n          {tbody}\n        </tbody>\n      </table>\n    )\n  }\n}\n\n// 盤面\nclass Board extends React.Component {\n  renderSquare (i) {\n    return <Square key={`board${i}`} name={this.props.board[i]} />\n  }\n\n  render () {\n    const tbody = []\n    for (let i = 2; i < y; i++) {\n      const row = []\n      for (let j = 0; j < x; j++) {\n        const num = i * x + j\n        if (num % x === 0 || num % x === x - 1) {\n          row.push(<td key={`board-td${num}`} className='block-type-wall' />)\n        } else if (this.props.figures.includes(num)) {\n          row.push(<td key={`board-td${num}`} className={`block-type-${this.props.color}`} />)\n        } else {\n          row.push(this.renderSquare(num))\n        }\n      }\n      tbody.push(<tr key={`board-tr${i}`} className='table-row'>{row}</tr>)\n    }\n\n    return (\n      <table className='board-table'>\n        <tbody>\n          {tbody}\n        </tbody>\n      </table>\n    )\n  }\n}\n\nclass Tetris extends React.Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      currentBlock: { // 今のブロック\n        figures: [], // スタート座標\n        color: 'next', // 色\n        angle: null\n      },\n      nextBlock: this.cleateblock(),\n      histories: [{ // 履歴\n        board: Array(maxNum).fill(null)\n      }],\n      score: 0,\n      level: 0,\n      message: '',\n      judge: ''\n    }\n    // キー操作が行われた時\n    window.onkeydown = (e) => {\n      if (this.state.currentBlock == null) {\n        return\n      }\n\n      if (e.key === 'ArrowLeft') {\n        this.moveLeft()\n      } else if (e.key === 'ArrowUp') {\n        this.rotate()\n      } else if (e.key === 'ArrowRight') {\n        this.moveRight()\n      } else if (e.key === 'ArrowDown') {\n        this.fallblock()\n      }\n    }\n  }\n\n  // 回転させる\n  rotate () {\n    const history = this.state.histories\n    const current = history[history.length - 1]\n    const board = current.board\n    const figures = this.state.currentBlock.figures.slice(0)\n    const rotatedFigures = []\n    const color = this.state.currentBlock.color\n    const angle = this.state.currentBlock.angle\n    const rotatedAngle = (angle !== 270) ? (angle + 90) : 0\n\n    if (color === 'lightblue') {\n      if (angle === 0 || angle === 180) {\n        rotatedFigures.push(blocktemplate(middleX, x, figures)[0].rotatedFigures[0])\n      } else if (angle === 90 || angle === 270) {\n        rotatedFigures.push(blocktemplate(middleX, x, figures)[0].rotatedFigures[1])\n      } else {\n        return\n      }\n    } else if (color === 'green') {\n      if (angle === 0 || angle === 180) {\n        console.log(figures)\n        rotatedFigures.push(blocktemplate(middleX, x, figures)[2].rotatedFigures[0])\n        console.log(rotatedFigures)\n      } else if (angle === 90 || angle === 270) {\n        rotatedFigures.push(blocktemplate(middleX, x, figures)[2].rotatedFigures[1])\n      } else {\n        return\n      }\n    } else if (color === 'red') {\n      if (angle === 0 || angle === 180) {\n        rotatedFigures.push(blocktemplate(middleX, x, figures)[3].rotatedFigures[0])\n      } else if (angle === 90 || angle === 270) {\n        rotatedFigures.push(blocktemplate(middleX, x, figures)[3].rotatedFigures[1])\n      } else {\n        return\n      }\n    } else if (color === 'blue') {\n      if (angle === 0) {\n        rotatedFigures.push(blocktemplate(middleX, x, figures)[4].rotatedFigures[0])\n      } else if (angle === 90) {\n        rotatedFigures.push(blocktemplate(middleX, x, figures)[4].rotatedFigures[1])\n      } else if (angle === 180) {\n        rotatedFigures.push(blocktemplate(middleX, x, figures)[4].rotatedFigures[2])\n      } else if (angle === 270) {\n        rotatedFigures.push(blocktemplate(middleX, x, figures)[4].rotatedFigures[3])\n      }\n    } else if (color === 'orange') {\n      if (angle === 0) {\n        rotatedFigures.push(blocktemplate(middleX, x, figures)[5].rotatedFigures[0])\n      } else if (angle === 90) {\n        rotatedFigures.push(blocktemplate(middleX, x, figures)[5].rotatedFigures[1])\n      } else if (angle === 180) {\n        rotatedFigures.push(blocktemplate(middleX, x, figures)[5].rotatedFigures[2])\n      } else if (angle === 270) {\n        rotatedFigures.push(blocktemplate(middleX, x, figures)[5].rotatedFigures[3])\n      }\n    } else if (color === 'purple') {\n      if (angle === 0) {\n        rotatedFigures.push(blocktemplate(middleX, x, figures)[6].rotatedFigures[0])\n      } else if (angle === 90) {\n        rotatedFigures.push(blocktemplate(middleX, x, figures)[6].rotatedFigures[1])\n      } else if (angle === 180) {\n        rotatedFigures.push(blocktemplate(middleX, x, figures)[6].rotatedFigures[2])\n      } else if (angle === 270) {\n        rotatedFigures.push(blocktemplate(middleX, x, figures)[6].rotatedFigures[3])\n      }\n    } else {\n      return\n    }\n\n    // 回転できる場所にいるときは、回転した配列を、回転できない場所にいるときはretun\n    if (rotatedFigures[0].find(f => f % x === 0 || f % x === x - 1)) {\n      return null\n    } else if (rotatedFigures[0].find(f => board[f - 1] !== null)) {\n      return null\n    } else {\n      this.setState({\n        currentBlock: {\n          figures: rotatedFigures[0],\n          color: color,\n          angle: rotatedAngle\n        }\n      })\n    }\n  }\n\n  moveLeft () {\n    const history = this.state.histories\n    const current = history[history.length - 1]\n    const board = current.board\n    const figures = this.state.currentBlock.figures.slice(0)\n    // 左が壁の場合は、return\n    if (figures.find(f => f % x === 1)) {\n      return\n    }\n    // 既に色がついているブロックがある場合は固定。\n    if (figures.find(f => board[f - 1] !== null)) {\n      return null\n    } else {\n      // 通常時は左にズラすのみ。\n      this.setState({\n        currentBlock: {\n          figures: figures.map(m => m - 1),\n          color: this.state.currentBlock.color,\n          angle: this.state.currentBlock.angle\n        }\n      })\n    }\n  }\n\n  moveRight () {\n    const history = this.state.histories\n    const current = history[history.length - 1]\n    const board = current.board\n    const figures = this.state.currentBlock.figures.slice(0)\n    // 右が壁の場合は、return\n    if (figures.find(f => f % x === x - 2)) {\n      return\n    }\n    // 既に色がついているブロックがある場合は固定。\n    if (figures.find(f => board[f + 1] !== null)) {\n      return null\n    } else {\n      // 通常時は左にズラすのみ。\n      this.setState({\n        currentBlock: {\n          figures: figures.map(m => m + 1),\n          color: this.state.currentBlock.color,\n          angle: this.state.currentBlock.angle\n        }\n      })\n    }\n  }\n\n  // 落とす関数（y軸をズラす）\n  fallblock () {\n    const history = this.state.histories\n    const current = history[history.length - 1]\n    const board = current.board\n    const figures = this.state.currentBlock.figures.slice(0)\n\n    // 任意のブロック配列に対して、ブロックにおける最下層のFix判定用配列を作成。\n    const filteredBottomFigure = figures.filter(f => figures.find(figure => figure === f + x))\n    const JudgeBottomFigure = figures.filter(f => filteredBottomFigure.indexOf(f) === -1)\n\n    // 配列の値のいずれかが、最下層、又は下に色がある時、Fix\n    if (JudgeBottomFigure.find(f => maxNum < f + x) || JudgeBottomFigure.find(f => board[f + x] !== null)) {\n      const minY = Math.floor(Math.min(...figures) / x)\n      const maxY = Math.floor(Math.max(...figures) / x)\n      this.fixblock()\n      this.deleteLine(minY, maxY)\n      this.setState({\n        histories: this.state.histories,\n        currentBlock: {\n          figures: [],\n          color: 'next',\n          angle: 0\n        }\n      })\n    } else {\n      this.setState({\n        currentBlock: {\n          figures: figures.map((figure) => figure + x),\n          color: this.state.currentBlock.color,\n          angle: this.state.currentBlock.angle\n        }\n      })\n    }\n  }\n\n  fixblock () {\n    const history = this.state.histories\n    const current = history[history.length - 1]\n    const boardcopy = current.board.slice()\n    const color = this.state.currentBlock.color\n\n    this.state.currentBlock.figures.forEach(f => {\n      boardcopy[f] = color\n    })\n    this.setState({\n      histories: history.concat([{\n        board: boardcopy\n      }])\n    })\n  }\n\n  // 空白行を削除して点数加算\n  delete () {\n    const history = this.state.histories\n    const copyboard = history[history.length - 1].board.slice(0)\n    let LineConter = 0\n\n    for (let i = 0; i < y; i++) {\n      if (copyboard[x * i] === 'delete') {\n        copyboard.splice(x * i, x)\n        LineConter++\n        [...Array(x)].map(() => copyboard.splice(1, 0, null))\n      }\n    }\n\n    this.setState({\n      histories: history.concat([{\n        board: copyboard\n      }]),\n      score: this.state.score + LineConter * 100 * (LineConter * 1)\n    })\n  }\n\n  // この関数は着色ラインを消すことのみを目的とする。\n  deleteLine (minY, maxY) {\n    const history = this.state.histories\n    const current = history[history.length - 1]\n    const copyhistories = this.state.histories.slice(0, history.length - 1)\n    const board = current.board\n    const copyboard = board.slice(0)\n\n    // 削除されるべきラインを全て”Null”にする\n    for (let i = minY; i <= maxY; i++) {\n      const Line = copyboard.slice(1 + x * i, x * (i + 1) - 1)\n      if (!Line.some(f => f === null)) {\n        copyboard.fill(null, x * i, x * (i + 1))\n        copyboard[x * i] = 'delete' // 盤面外の最左列を”delete”対象として判定する。\n      }\n    }\n    copyhistories.push({ board: copyboard })\n    this.setState({\n      histories: copyhistories\n    })\n  }\n\n  getRandomBlock () {\n    return Math.floor(Math.random() * 7)\n  }\n\n  cleateblock () {\n    const blocks = blocktemplate(middleX, x, Array(5).fill(null))\n    return blocks[this.getRandomBlock()]\n  }\n\n  changeInfo (level, message, judge, timeId, time) {\n    clearTimeout(timeId)\n    if (time !== null) {\n      timeId = setTimeout(this.mainloop.bind(this), time)\n    }\n    this.setState({\n      level: level,\n      message: message,\n      judge: judge\n    })\n  }\n\n  mainloop () {\n    const history = this.state.histories\n    const current = history[history.length - 1]\n    const board = current.board\n    const nextBlock = this.state.nextBlock.figures\n    const level = this.state.level\n\n    if (board.includes('delete')) {\n      this.delete()\n    }\n    const timeId = setTimeout(this.mainloop.bind(this), 1000)\n\n    // ブロックを作成する（For creating blocks）\n    if (this.state.currentBlock.color === 'next') {\n      this.setState({\n        currentBlock: this.state.nextBlock,\n        nextBlock: this.cleateblock()\n      })\n    }\n\n    // 次のブロックが出現する場所に、1個でも色があったら、ゲームオーバー\n    if (nextBlock.find(f => board[f] !== null)) {\n      this.state.score >= 5000\n        ? this.changeInfo(level, '5000点以上とるとわ。。。 いっぱい遊んで、くれたんやな、、、ありがとう！！！完敗や', 'You are winner', timeId, null)\n        : this.changeInfo(level, 'がははは、100年早いわ！出直してきんしゃい！', 'You are loser', timeId, null)\n    } else {\n      if (this.state.score < 100) {\n        this.changeInfo(level, 'さて、お手並み拝見させて貰おうか', '', timeId, 1000)\n      } else if (this.state.score < 1000) {\n        this.changeInfo(2, 'ほほう！やり方は、知っているみたいだな。それじゃ行くぞ', '', timeId, 500)\n      } else if (this.state.score < 1700) {\n        this.changeInfo(3, 'むむむ、なかなかうまいな', '', timeId, 350)\n      } else if (this.state.score < 3500) {\n        this.changeInfo(4, 'ま、ま、まだ大丈夫だ', '', timeId, 200)\n      } else if (this.state.score < 4500) {\n        this.changeInfo('MAX', 'こ、このままだと、負けてしまう。。あれを準備しよう。。。', '', timeId, 150)\n      } else {\n        this.changeInfo('奥義発動', '勝たせない！', '', timeId, 10)\n      }\n    }\n    this.fallblock()\n  }\n\n  startGame () {\n    this.mainloop()\n  }\n\n  componentDidMount () {\n    this.startGame()\n  }\n\n  render () {\n    const history = this.state.histories\n    const current = history[history.length - 1]\n\n    return (\n      <div className='wrapper-container'>\n        <div className='title'>\n          <h1>最難テトリス ”ナカヤマン”</h1>\n          <p>スコア5000点以上とって、ナカヤマンをぶっ倒せ！！！</p>\n        </div>\n        <span className='tetris-container'>\n          <Board\n            board={current.board}\n            color={this.state.currentBlock.color}\n            figures={this.state.currentBlock.figures}\n          />\n          <span className='tetris-panel-container'>\n            <div className='information'>\n              <div className='tetris-nextBlock'>\n                <p>Next:</p>\n                <Table\n                  color={this.state.nextBlock.color}\n                />\n              </div>\n              <div className='score-message'>\n                <TetrisInformationPanel\n                  score={this.state.score}\n                  level={this.state.level}\n                  message={this.state.message}\n                  judge={this.state.judge}\n                />\n              </div>\n            </div>\n            <div className='tetris-panel-container-padding' />\n            <table className='tetris-button-panel'>\n              <tbody>\n                <tr>\n                  <td />\n                  <td id='tetris-rotate-button' className='tetris-button' onMouseDown={this.rotate.bind(this)}>↻</td>\n                  <td />\n                </tr>\n                <tr>\n                  <td id='tetris-move-left-button' className='tetris-button' onMouseDown={this.moveLeft.bind(this)}>←</td>\n                  <td id='tetris-fall-button' className='tetris-button' onMouseDown={this.fallblock.bind(this)}>↓</td>\n                  <td id='tetris-move-right-button' className='tetris-button' onMouseDown={this.moveRight.bind(this)}>→</td>\n                </tr>\n              </tbody>\n            </table>\n          </span>\n        </span>\n      </div>\n    )\n  }\n}\n\n(async _ => {\n  await ga4react.initialize()\n  ReactDOM.render(\n    <React.StrictMode>\n      <Tetris />\n    </React.StrictMode>,\n    document.getElementById('root')\n  )\n})()\n"],"sourceRoot":""}